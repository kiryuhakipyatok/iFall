// Code generated by MockGen. DO NOT EDIT.
// Source: bot.go

// Package mock_bot is a generated GoMock package.
package mock_bot

import (
	bot "iFall/internal/bot"
	models "iFall/internal/domain/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTelegramBot is a mock of TelegramBot interface.
type MockTelegramBot struct {
	ctrl     *gomock.Controller
	recorder *MockTelegramBotMockRecorder
}

// MockTelegramBotMockRecorder is the mock recorder for MockTelegramBot.
type MockTelegramBotMockRecorder struct {
	mock *MockTelegramBot
}

// NewMockTelegramBot creates a new mock instance.
func NewMockTelegramBot(ctrl *gomock.Controller) *MockTelegramBot {
	mock := &MockTelegramBot{ctrl: ctrl}
	mock.recorder = &MockTelegramBotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTelegramBot) EXPECT() *MockTelegramBotMockRecorder {
	return m.recorder
}

// SendIPhonesInfo mocks base method.
func (m *MockTelegramBot) SendIPhonesInfo(datas []bot.DataToSend, iphones []models.IPhone) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendIPhonesInfo", datas, iphones)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendIPhonesInfo indicates an expected call of SendIPhonesInfo.
func (mr *MockTelegramBotMockRecorder) SendIPhonesInfo(datas, iphones interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendIPhonesInfo", reflect.TypeOf((*MockTelegramBot)(nil).SendIPhonesInfo), datas, iphones)
}

// SetupTelegramBot mocks base method.
func (m *MockTelegramBot) SetupTelegramBot() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetupTelegramBot")
}

// SetupTelegramBot indicates an expected call of SetupTelegramBot.
func (mr *MockTelegramBotMockRecorder) SetupTelegramBot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupTelegramBot", reflect.TypeOf((*MockTelegramBot)(nil).SetupTelegramBot))
}

// Start mocks base method.
func (m *MockTelegramBot) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockTelegramBotMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockTelegramBot)(nil).Start))
}

// Stop mocks base method.
func (m *MockTelegramBot) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockTelegramBotMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockTelegramBot)(nil).Stop))
}
