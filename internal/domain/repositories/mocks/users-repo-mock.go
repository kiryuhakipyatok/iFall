// Code generated by MockGen. DO NOT EDIT.
// Source: users-repo.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	models "iFall/internal/domain/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CheckChatId mocks base method.
func (m *MockUserRepository) CheckChatId(ctx context.Context, op, telegram string, chatId int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckChatId", ctx, op, telegram, chatId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckChatId indicates an expected call of CheckChatId.
func (mr *MockUserRepositoryMockRecorder) CheckChatId(ctx, op, telegram, chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckChatId", reflect.TypeOf((*MockUserRepository)(nil).CheckChatId), ctx, op, telegram, chatId)
}

// Create mocks base method.
func (m *MockUserRepository) Create(ctx context.Context, user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoryMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepository)(nil).Create), ctx, user)
}

// DropChatId mocks base method.
func (m *MockUserRepository) DropChatId(ctx context.Context, telegram string, chatId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropChatId", ctx, telegram, chatId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropChatId indicates an expected call of DropChatId.
func (mr *MockUserRepositoryMockRecorder) DropChatId(ctx, telegram, chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropChatId", reflect.TypeOf((*MockUserRepository)(nil).DropChatId), ctx, telegram, chatId)
}

// DropDesiredPrice mocks base method.
func (m *MockUserRepository) DropDesiredPrice(ctx context.Context, chatId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropDesiredPrice", ctx, chatId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropDesiredPrice indicates an expected call of DropDesiredPrice.
func (mr *MockUserRepositoryMockRecorder) DropDesiredPrice(ctx, chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropDesiredPrice", reflect.TypeOf((*MockUserRepository)(nil).DropDesiredPrice), ctx, chatId)
}

// FetchContacts mocks base method.
func (m *MockUserRepository) FetchContacts(ctx context.Context) ([]models.Contacts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchContacts", ctx)
	ret0, _ := ret[0].([]models.Contacts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchContacts indicates an expected call of FetchContacts.
func (mr *MockUserRepositoryMockRecorder) FetchContacts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchContacts", reflect.TypeOf((*MockUserRepository)(nil).FetchContacts), ctx)
}

// SetChatId mocks base method.
func (m *MockUserRepository) SetChatId(ctx context.Context, telegram string, chatId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetChatId", ctx, telegram, chatId)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetChatId indicates an expected call of SetChatId.
func (mr *MockUserRepositoryMockRecorder) SetChatId(ctx, telegram, chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetChatId", reflect.TypeOf((*MockUserRepository)(nil).SetChatId), ctx, telegram, chatId)
}

// SetDesiredPrice mocks base method.
func (m *MockUserRepository) SetDesiredPrice(ctx context.Context, chatId int64, price float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDesiredPrice", ctx, chatId, price)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDesiredPrice indicates an expected call of SetDesiredPrice.
func (mr *MockUserRepositoryMockRecorder) SetDesiredPrice(ctx, chatId, price interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDesiredPrice", reflect.TypeOf((*MockUserRepository)(nil).SetDesiredPrice), ctx, chatId, price)
}
