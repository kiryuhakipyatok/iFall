// Code generated by MockGen. DO NOT EDIT.
// Source: iphones-service.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	models "iFall/internal/domain/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIPhoneService is a mock of IPhoneService interface.
type MockIPhoneService struct {
	ctrl     *gomock.Controller
	recorder *MockIPhoneServiceMockRecorder
}

// MockIPhoneServiceMockRecorder is the mock recorder for MockIPhoneService.
type MockIPhoneServiceMockRecorder struct {
	mock *MockIPhoneService
}

// NewMockIPhoneService creates a new mock instance.
func NewMockIPhoneService(ctrl *gomock.Controller) *MockIPhoneService {
	mock := &MockIPhoneService{ctrl: ctrl}
	mock.recorder = &MockIPhoneServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPhoneService) EXPECT() *MockIPhoneServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockIPhoneService) Get(ctx context.Context, id string) (*models.IPhone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*models.IPhone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIPhoneServiceMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIPhoneService)(nil).Get), ctx, id)
}

// Update mocks base method.
func (m *MockIPhoneService) Update(ctx context.Context, id string) (*models.IPhone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id)
	ret0, _ := ret[0].(*models.IPhone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIPhoneServiceMockRecorder) Update(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIPhoneService)(nil).Update), ctx, id)
}

// UpdateAll mocks base method.
func (m *MockIPhoneService) UpdateAll() ([]models.IPhone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll")
	ret0, _ := ret[0].([]models.IPhone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockIPhoneServiceMockRecorder) UpdateAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockIPhoneService)(nil).UpdateAll))
}
